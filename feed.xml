<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="https://andebugulin.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://andebugulin.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-10-12T18:30:46+00:00</updated><id>https://andebugulin.github.io/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">cloud computing concepts</title><link href="https://andebugulin.github.io/blog/2024/09/11/cloud-computing-concepts/" rel="alternate" type="text/html" title="cloud computing concepts"/><published>2024-09-11T00:00:00+00:00</published><updated>2024-09-11T00:00:00+00:00</updated><id>https://andebugulin.github.io/blog/2024/09/11/cloud-computing-concepts</id><content type="html" xml:base="https://andebugulin.github.io/blog/2024/09/11/cloud-computing-concepts/"><![CDATA[<h2 id="introduction">Introduction</h2> <p>This report covers fundamental concepts of cloud computing and an introduction to Azure architecture. The primary focus is on cloud services, payment models, Azure regions, resource management, and tools for handling Azure resources.</p> <hr/> <h2 id="what-we-covered-last-week">What We Covered Last Week</h2> <ul> <li>Daily use of cloud services.</li> <li>Free vs paid cloud services for business purposes.</li> <li>Benefits of cloud computing.</li> <li>Cloud models: Private, Public, Hybrid.</li> <li>High availability does not equal zero downtime in cloud environments.</li> <li><strong>IaaS, PaaS, SaaS:</strong> The “pizza sauces” analogy.</li> <li>Difference between <strong>Scale Out</strong> and <strong>Scale Up</strong>.</li> </ul> <hr/> <h2 id="expenditure">Expenditure</h2> <h3 id="capital-expenditure-capex">Capital Expenditure (CapEx)</h3> <ul> <li>Company’s costs for acquiring and maintaining assets like land, buildings, or servers.</li> </ul> <h3 id="operational-expenditure-opex">Operational Expenditure (OpEx)</h3> <ul> <li>Expenditure on supporting existing systems such as electricity, domain registration, and server settings.</li> </ul> <h3 id="methods-of-payment">Methods of Payment</h3> <ul> <li><strong>Per hour:</strong> Virtual Machines (VM), App Services.</li> <li><strong>By resource use:</strong> Pay based on the resources consumed regardless of time (e.g., per request or per second of use).</li> </ul> <hr/> <h2 id="serverless">Serverless</h2> <p>Serverless computing focuses on executing tasks without managing traditional server infrastructure, allowing automatic scaling and only paying for the time code runs.</p> <hr/> <h2 id="traditional-data-centers">Traditional Data Centers</h2> <ul> <li>Large, renewable-energy-powered areas.</li> <li>Safe, reliable, with a long-term perspective.</li> <li>Custom-built servers for cloud services.</li> </ul> <h3 id="natick-project">Natick Project</h3> <p>Microsoft’s underwater, self-maintained data center project off the coast of Scotland, housing 800 servers.</p> <hr/> <h2 id="azure-architecture">Azure Architecture</h2> <h3 id="regions">Regions</h3> <ul> <li>Azure regions consist of several data centers connected by high-speed networks.</li> <li>Each region includes more than one data center to minimize latency.</li> </ul> <h3 id="availability-zones">Availability Zones</h3> <ul> <li>Zones within a region ensure data redundancy and resiliency.</li> </ul> <h3 id="paired-regions">Paired Regions</h3> <ul> <li>Azure pairs regions to ensure backup during failures and planned maintenance.</li> </ul> <hr/> <h2 id="resource-groups">Resource Groups</h2> <p>Resource groups are mandatory in Azure and allow for better organization, management, and access control of resources across regions.</p> <ul> <li>Group creation, modification, and monitoring are centralized.</li> <li>Can manage multiple regions and control access.</li> </ul> <hr/> <h2 id="azure-resource-manager-arm">Azure Resource Manager (ARM)</h2> <p>ARM is the primary tool for deploying and managing Azure resources. All requests to Azure resources pass through ARM.</p> <h3 id="advantages-of-arm">Advantages of ARM</h3> <ul> <li>Centralized resource management.</li> <li>Consistency across management tools.</li> <li>Setting resource dependencies.</li> <li>Easy management rights assignment.</li> <li>Tagging and organizing resources.</li> </ul> <hr/> <h2 id="azure-management-tools">Azure Management Tools</h2> <h3 id="azure-portal">Azure Portal</h3> <ul> <li>Web-based interface to manage and monitor Azure services.</li> <li>Supports custom dashboards, access control, and cost management.</li> </ul> <h3 id="azure-command-line-interface-cli">Azure Command Line Interface (CLI)</h3> <ul> <li>Allows automating tasks and managing Azure via commands, available across Windows, Mac, and Linux.</li> </ul> <h3 id="azure-powershell">Azure PowerShell</h3> <ul> <li>Command line tool for managing Azure resources with scripts and Cmdlets, especially useful in Windows environments.</li> </ul> <h3 id="azure-cloud-shell">Azure Cloud Shell</h3> <ul> <li>Browser-based interactive environment for managing Azure using Bash or PowerShell.</li> </ul>]]></content><author><name>Andrei Gulin</name></author><category term="cloud,"/><category term="azure,"/><category term="computing"/><summary type="html"><![CDATA[Cloud computing fundamentals and Azure architecture overview.]]></summary></entry><entry><title type="html">project management</title><link href="https://andebugulin.github.io/blog/2024/09/09/project-management/" rel="alternate" type="text/html" title="project management"/><published>2024-09-09T00:00:00+00:00</published><updated>2024-09-09T00:00:00+00:00</updated><id>https://andebugulin.github.io/blog/2024/09/09/project-management</id><content type="html" xml:base="https://andebugulin.github.io/blog/2024/09/09/project-management/"><![CDATA[<h2 id="introduction">Introduction</h2> <p>I am learnig research and development skills.</p> <hr/> <h2 id="project-life-cycle">Project life cycle</h2> <h3 id="phases">Phases:</h3> <ul> <li>initiate<d-footnote>collect info related, gaps and risk assessment, build a team, understand goals and requirements before scoping and budgeting </d-footnote></li> </ul> <details><summary>standardize</summary> <p>In practise you can fully standardize this process</p> </details> <ul> <li>plan<d-footnote>break down the project into tasks, checklists, schedule tasks, prioritize tasks</d-footnote></li> <li>execute<d-footnote>allocate resources, assign tasks, check the plan, adjust the direction</d-footnote></li> <li>monitor and control<d-footnote>monitor performance, track uncertainties, manage constraints, control quality, document</d-footnote></li> </ul> <details><summary>important</summary> <p>You should ensure the quality stays at least above the minimal level</p> </details> <ul> <li>close<d-footnote>contracts, finances, document, feedback from stakeholders and collegues, project acceptance</d-footnote></li> </ul> <hr/> <h2 id="recommendations">Recommendations</h2> <ul> <li>clockify</li> <li>pm environment like ClickUp is important</li> <li>folders and structure</li> <li>ensure the information is up to date and nothing messes up the project life</li> <li>plan one day ahead (more is not recommended, plans are often changed)</li> </ul> <hr/> <h2 id="team-project">Team project</h2> <h3 id="8th-project">(8th project)</h3>]]></content><author><name>Andrei Gulin</name></author><category term="softskills"/><summary type="html"><![CDATA[Project management]]></summary></entry><entry><title type="html">singleton pattern</title><link href="https://andebugulin.github.io/blog/2024/09/05/singleton-pattern/" rel="alternate" type="text/html" title="singleton pattern"/><published>2024-09-05T00:00:00+00:00</published><updated>2024-09-05T00:00:00+00:00</updated><id>https://andebugulin.github.io/blog/2024/09/05/singleton-pattern</id><content type="html" xml:base="https://andebugulin.github.io/blog/2024/09/05/singleton-pattern/"><![CDATA[<h2 id="introduction">Introduction</h2> <p>In this report, I will try to delve into the singleton pattern. How to implement it and when and where it is useful to apply.</p> <hr/> <h2 id="references">References</h2> <p><a href="https://refactoring.guru/design-patterns/singleton">Singleton pattern</a></p> <hr/> <h2 id="what-does-it-do">What does it do?</h2> <ol> <li> <p>The singleton pattern controls how many instances of a class can be created<d-footnote>To control access to shared resources, such as a database connection or a file.</d-footnote></p> </li> <li> <p>Provide a global access point to that instance<d-footnote>With simple global variable that store important content, this content may be overwritten almost by everything, however singleton allows the access, but it as well protects from overwriting it</d-footnote></p> </li> </ol> <ul> <li>Imagine that you created an object, but after a while decided to create a new one. Instead of receiving a fresh object, you’ll get the one you already created</li> </ul> <details><summary>note</summary> <p>this behavior is impossible to implement with a regular constructor since a constructor call must always return a new object by design</p> </details> <hr/> <h2 id="implementation">Implementation</h2> <ol> <li> <p>Make the default constructor private, to prevent other objects from using the <code class="language-plaintext highlighter-rouge">new</code> operator with the Singleton class.</p> </li> <li> <p>Create a static creation method that acts as a constructor. Under the hood, this method calls the private constructor to create an object and saves it in a static field. All following calls to this method return the cached object.</p> </li> </ol> <ul> <li>If your code has access to the Singleton class, then it’s able to call the Singleton’s static method. So whenever that method is called, the same object is always returned.</li> </ul> <hr/> <h2 id="code-example">Code example</h2> <div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// The Database class defines the `getInstance` method that lets</span>
<span class="c1">// clients access the same instance of a database connection</span>
<span class="c1">// throughout the program.</span>
<span class="k">class</span> <span class="nc">Database</span> <span class="k">is</span>
    <span class="c1">// The field for storing the singleton instance should be</span>
    <span class="c1">// declared static.</span>
    <span class="k">private</span> <span class="k">static</span> <span class="n">field</span> <span class="n">instance</span><span class="p">:</span> <span class="n">Database</span>

    <span class="c1">// The singleton's constructor should always be private to</span>
    <span class="c1">// prevent direct construction calls with the `new`</span>
    <span class="c1">// operator.</span>
    <span class="k">private</span> <span class="n">constructor</span> <span class="nf">Database</span><span class="p">()</span> <span class="k">is</span>
        <span class="c1">// Some initialization code, such as the actual</span>
        <span class="c1">// connection to a database server.</span>
        <span class="c1">// ...</span>

    <span class="c1">// The static method that controls access to the singleton</span>
    <span class="c1">// instance.</span>
    <span class="k">public</span> <span class="k">static</span> <span class="n">method</span> <span class="nf">getInstance</span><span class="p">()</span> <span class="k">is</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">Database</span><span class="p">.</span><span class="n">instance</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span> <span class="n">then</span>
            <span class="nf">acquireThreadLock</span><span class="p">()</span> <span class="k">and</span> <span class="n">then</span>
                <span class="c1">// Ensure that the instance hasn't yet been</span>
                <span class="c1">// initialized by another thread while this one</span>
                <span class="c1">// has been waiting for the lock's release.</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">Database</span><span class="p">.</span><span class="n">instance</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span> <span class="n">then</span>
                    <span class="n">Database</span><span class="p">.</span><span class="n">instance</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Database</span><span class="p">()</span>
        <span class="k">return</span> <span class="n">Database</span><span class="p">.</span><span class="n">instance</span>

    <span class="c1">// Finally, any singleton should define some business logic</span>
    <span class="c1">// which can be executed on its instance.</span>
    <span class="k">public</span> <span class="n">method</span> <span class="nf">query</span><span class="p">(</span><span class="n">sql</span><span class="p">)</span> <span class="k">is</span>
        <span class="c1">// For instance, all database queries of an app go</span>
        <span class="c1">// through this method. Therefore, you can place</span>
        <span class="c1">// throttling or caching logic here.</span>
        <span class="c1">// ...</span>

<span class="k">class</span> <span class="nc">Application</span> <span class="k">is</span>
    <span class="n">method</span> <span class="nf">main</span><span class="p">()</span> <span class="k">is</span>
        <span class="n">Database</span> <span class="n">foo</span> <span class="p">=</span> <span class="n">Database</span><span class="p">.</span><span class="nf">getInstance</span><span class="p">()</span>
        <span class="n">foo</span><span class="p">.</span><span class="nf">query</span><span class="p">(</span><span class="s">"SELECT ..."</span><span class="p">)</span>
        <span class="c1">// ...</span>
        <span class="n">Database</span> <span class="n">bar</span> <span class="p">=</span> <span class="n">Database</span><span class="p">.</span><span class="nf">getInstance</span><span class="p">()</span>
        <span class="n">bar</span><span class="p">.</span><span class="nf">query</span><span class="p">(</span><span class="s">"SELECT ..."</span><span class="p">)</span>
        <span class="c1">// The variable `bar` will contain the same object as</span>
        <span class="c1">// the variable `foo`.</span>
</code></pre></div></div> <hr/> <h2 id="pros-and-cons-of-the-singleton-pattern">Pros and Cons of the Singleton Pattern</h2> <h3 id="pros"><strong>Pros</strong></h3> <ul> <li><strong>Single Instance</strong>: Ensures that a class has only one instance.</li> <li><strong>Global Access</strong>: Provides a global access point to that instance.</li> <li><strong>Lazy Initialization</strong>: The singleton object is only initialized when it’s requested for the first time, saving resources.</li> </ul> <h3 id="cons"><strong>Cons</strong></h3> <ul> <li><strong>Violates Single Responsibility Principle</strong>: The pattern solves two problems at once—controlling instance creation and providing global access.</li> <li><strong>Masks Bad Design</strong>: Can hide design issues, as components may become overly dependent on each other.</li> <li><strong>Multithreading Issues</strong>: In a multithreaded environment, special handling is required to avoid creating multiple singleton instances.</li> <li><strong>Difficult to Test</strong>: Unit testing can be challenging because many frameworks rely on inheritance for mocking. The private constructor of a singleton makes mocking difficult, and static methods can’t be easily overridden in most languages.</li> </ul>]]></content><author><name>Andrei Gulin</name></author><category term="code"/><category term="c#"/><summary type="html"><![CDATA[singleton pattern (C#)]]></summary></entry><entry><title type="html">studying template</title><link href="https://andebugulin.github.io/blog/2024/09/04/studying-template/" rel="alternate" type="text/html" title="studying template"/><published>2024-09-04T00:00:00+00:00</published><updated>2024-09-04T00:00:00+00:00</updated><id>https://andebugulin.github.io/blog/2024/09/04/studying-template</id><content type="html" xml:base="https://andebugulin.github.io/blog/2024/09/04/studying-template/"><![CDATA[<h2 id="introduction">Introduction</h2> <p>\(E = mc^2\).</p> \[\left( \sum_{k=1}^n a_k b_k \right)^2 \leq \left( \sum_{k=1}^n a_k^2 \right) \left( \sum_{k=1}^n b_k^2 \right)\] <hr/> <h2 id="footnotes">Footnotes</h2> <p>Just wrap the text you would like to show up in a footnote in a <code class="language-plaintext highlighter-rouge">&lt;d-footnote&gt;</code> tag. The number of the footnote will be automatically generated.<d-footnote>This will become a hoverable footnote.</d-footnote></p> <hr/> <h2 id="code-blocks">Code Blocks</h2> <figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">25</span><span class="p">;</span>
<span class="kd">function</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="p">{</span>
<span class="k">return</span> <span class="nx">x</span> <span class="err">\</span><span class="o">*</span> <span class="nx">x</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure> <hr/> <h2 id="details-boxes">Details boxes</h2> <p>Details boxes are collapsible boxes which hide additional information from the user. They can be added with the <code class="language-plaintext highlighter-rouge">details</code> liquid tag:</p> <details><summary>Click here to know more</summary> <p>Additional details, where math \(2x - 1\) and <code class="language-plaintext highlighter-rouge">code</code> is rendered correctly.</p> </details> <hr/> <p>It is the assumed layout of any direct descendants of the <code class="language-plaintext highlighter-rouge">d-article</code> element.</p> <div class="fake-img l-body"> <p>.l-body</p> </div> <p>For images you want to display a little larger, try <code class="language-plaintext highlighter-rouge">.l-page</code>:</p> <div class="fake-img l-page"> <p>.l-page</p> </div> <div class="fake-img l-body-outset"> <p>.l-body-outset</p> </div> <div class="fake-img l-page-outset"> <p>.l-page-outset</p> </div> <p>Occasionally you’ll want to use the full browser width. For this, use <code class="language-plaintext highlighter-rouge">.l-screen</code>. You can also inset the element a little from the edge of the browser by using the inset variant.</p> <div class="fake-img l-screen"> <p>.l-screen</p> </div> <div class="fake-img l-screen-inset"> <p>.l-screen-inset</p> </div> <p>The final layout is for marginalia, asides, and footnotes. It does not interrupt the normal flow of <code class="language-plaintext highlighter-rouge">.l-body</code> sized text except on mobile screen sizes.</p> <div class="fake-img l-gutter"> <p>.l-gutter</p> </div> <hr/> <h2 id="other-typography">Other Typography?</h2> <p><em>asterisks</em></p> <p><strong>asterisks</strong></p> <p><del>Scratch this.</del></p> <ol> <li>First ordered list item</li> <li>Another item</li> </ol> <ul> <li> <p>Unordered list can use asterisks</p> </li> <li> <p>Or minuses</p> </li> <li> <p>Or pluses</p> </li> </ul> <p><a href="https://www.google.com">I’m an inline-style link</a></p> <table> <thead> <tr> <th>Tables</th> <th style="text-align: center">Are</th> <th style="text-align: right">Cool</th> </tr> </thead> <tbody> <tr> <td>col 3 is</td> <td style="text-align: center">right-aligned</td> <td style="text-align: right">$1600</td> </tr> <tr> <td>col 2 is</td> <td style="text-align: center">centered</td> <td style="text-align: right">$12</td> </tr> <tr> <td>zebra stripes</td> <td style="text-align: center">are neat</td> <td style="text-align: right">$1</td> </tr> </tbody> </table>]]></content><author><name>Andrei Gulin</name></author><category term="distill"/><category term="formatting"/><summary type="html"><![CDATA[an example of a distill-styled main elements]]></summary></entry></feed>